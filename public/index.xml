<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>The Python Blog</title>
    <link>https://edwardfry.github.io/blog/</link>
    <description>Recent content on The Python Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Feb 2023 17:21:43 +0000</lastBuildDate><atom:link href="https://edwardfry.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello</title>
      <link>https://edwardfry.github.io/blog/posts/hellow/</link>
      <pubDate>Thu, 02 Feb 2023 17:21:43 +0000</pubDate>
      
      <guid>https://edwardfry.github.io/blog/posts/hellow/</guid>
      <description>Hello World!</description>
    </item>
    
    <item>
      <title>Python Decorators</title>
      <link>https://edwardfry.github.io/blog/posts/decorator/</link>
      <pubDate>Tue, 31 Jan 2023 17:09:20 +0000</pubDate>
      
      <guid>https://edwardfry.github.io/blog/posts/decorator/</guid>
      <description>In python, decorator are used to add behaviour to an existing function. Decorators allow the programmer to run logic before and after a function runs. In the example below the example_decorator prints &amp;quot;Before function runs.&amp;quot;, runs the function that it decorates (in this case the function do_something) then prints &amp;quot;After function runs.&amp;quot;
Where you find code repeated in multiple functions, a decorator may be useful.
from functools import wraps def example_decorator(func): @wraps(func) def _inner(*args, **kwargs): # do something before function runs.</description>
    </item>
    
  </channel>
</rss>
